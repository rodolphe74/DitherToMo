* 6809 assembly program generated by cmoc 0.1.85


	SECTION	start


program_start	EXPORT
_main	IMPORT
INILIB	IMPORT
_exit	IMPORT
program_start	EQU	*
	LDD	#-1024		stack space in bytes
	LBSR	INILIB		initialize standard library and global variables
	LBSR	_main		call main()
	PSHS	B,A		send main() return value to exit()
	LBSR	_exit		use LBSR to respect calling convention


	ENDSECTION




	SECTION	code


_dkdrv	IMPORT
_dkbuf	IMPORT
_dktrk	IMPORT
_dksec	IMPORT
_dkopc	IMPORT
_secBuf	IMPORT
_pbuf	IMPORT
_blocks	IMPORT
_curTrk	IMPORT
_curSec	IMPORT
_dicSize	IMPORT
_dicBitSize	IMPORT
_aheadSize	IMPORT
_aheadBitSize	IMPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_bruteForceSearchOptim	IMPORT
_bsearch	IMPORT
_cmpdww	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_init	IMPORT
_initBitField	IMPORT
_initDefaultParameters	IMPORT
_initParameters	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_read	IMPORT
_readbits	IMPORT
_readline	IMPORT
_readword	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_seekFile	IMPORT
_setConsoleOutHook	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strstr	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_ultoa10	IMPORT
_uncompress	IMPORT
_utoa10	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_zerodw	IMPORT
__160	EXPORT


*******************************************************************************

* FUNCTION _160(): defined at loader.c:6
__160	EQU	*
* Calling convention: Default
* Line loader.c:9: inline assembly
* Inline assembly:


    LDA #$7B
    STA $E7DC


* End of inline assembly.
* Useless label L00081 removed
	RTS
* END FUNCTION _160(): defined at loader.c:6
funcend__160	EQU *
funcsize__160	EQU	funcend__160-__160
__PALETTE	EXPORT


*******************************************************************************

* FUNCTION _PALETTE(): defined at loader.c:16
__PALETTE	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
* Formal parameter(s):
*      4,U:    2 bytes: palette16: unsigned int *
* Line loader.c:18: inline assembly
* Inline assembly:


    LDY 4,U
    CLRA
PALETTE_FOND
    PSHS A
    ASLA
    STA $E7DB
    LDD ,Y++ * couleur
    STB $E7DA
    STA $E7DA
    PULS A
    INCA
    CMPA #$10 * 16x
    BNE PALETTE_FOND


* End of inline assembly.
* Useless label L00082 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION _PALETTE(): defined at loader.c:16
funcend__PALETTE	EQU *
funcsize__PALETTE	EQU	funcend__PALETTE-__PALETTE
__SWITCH_B	EXPORT


*******************************************************************************

* FUNCTION _SWITCH_B(): defined at loader.c:37
__SWITCH_B	EQU	*
* Calling convention: Default
* Line loader.c:39: inline assembly
* Inline assembly:


    LDB $E7C3
    ANDB #$FE
    STB $E7C3


* End of inline assembly.
* Useless label L00083 removed
	RTS
* END FUNCTION _SWITCH_B(): defined at loader.c:37
funcend__SWITCH_B	EQU *
funcsize__SWITCH_B	EQU	funcend__SWITCH_B-__SWITCH_B
__WAITSPC	EXPORT


*******************************************************************************

* FUNCTION _WAITSPC(): defined at loader.c:46
__WAITSPC	EQU	*
* Calling convention: Default
* Line loader.c:48: inline assembly
* Inline assembly:


TEST JSR $E806 * Keyboard routine
       TSTB * Loop
       BEQ TEST * nothing
       CMPB #$20 * space
       BEQ EXITKBDLOOP * exit
       BRA TEST * next loop
EXITKBDLOOP


* End of inline assembly.
* Useless label L00084 removed
	RTS
* END FUNCTION _WAITSPC(): defined at loader.c:46
funcend__WAITSPC	EQU *
funcsize__WAITSPC	EQU	funcend__WAITSPC-__WAITSPC
_loadAndDisplay	EXPORT


*******************************************************************************

* FUNCTION loadAndDisplay(): defined at loader.c:60
_loadAndDisplay	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-2207,S
* Formal parameter(s):
*      4,U:    2 bytes: name: const char *
*      6,U:    2 bytes: ext: const char *
* Local non-static variable(s):
*  -2207,U:    2 bytes: l: int
*  -2205,U:    2 bytes: sizex: int
*  -2203,U:    2 bytes: sizexx: int
*  -2201,U:    2 bytes: sizey: int
*  -2199,U:    1 byte : aChunks: unsigned char
*  -2198,U:    1 byte : bChunks: unsigned char
*  -2197,U:    2 bytes: screenStart: int *
*  -2195,U:    2 bytes: screenStartChar: unsigned char *
*  -2193,U:  183 bytes: r: struct FILE_STRUCT
*  -2010,U: 2000 bytes: myBuf: unsigned char[]
*    -10,U:    2 bytes: chunkSize: unsigned int
*     -8,U:    2 bytes: inputIdx: unsigned int
*     -6,U:    2 bytes: outputIdx: unsigned int
*     -4,U:    2 bytes: sz: unsigned int
*     -2,U:    1 byte : count: unsigned char
*     -1,U:    1 byte : isComp: unsigned char
* Line loader.c:61: init of variable l
	CLRA
	LDB	#$04		4
	STD	-2207,U		variable l
* Line loader.c:66: init of variable screenStart
	LDD	#$4000		decimal 16384 signed
* Emitted no code to cast `int' to `int *'
	STD	-2197,U		variable screenStart
* Line loader.c:67: init of variable screenStartChar
* optim: storeLoad
* Emitted no code to cast `int *' to `unsigned char *'
	STD	-2195,U		variable screenStartChar
* Line loader.c:70: function call: _160()
	LBSR	__160
* Line loader.c:73: function call: memset()
	LDD	#$1F40		decimal 8000 signed
	PSHS	B,A		argument 3 of memset(): int
	CLRA
	CLRB
	PSHS	B,A		argument 2 of memset(): int
	LDD	-2195,U		variable `screenStartChar', declared at loader.c:67
	PSHS	B,A		argument 1 of memset(): unsigned char *
	LBSR	_memset
	LEAS	6,S
* Line loader.c:74: function call: _SWITCH_B()
	LBSR	__SWITCH_B
* Line loader.c:75: function call: memset()
	LDD	#$1F40		decimal 8000 signed
	PSHS	B,A		argument 3 of memset(): int
	CLRA
	CLRB
	PSHS	B,A		argument 2 of memset(): int
	LDD	-2195,U		variable `screenStartChar', declared at loader.c:67
	PSHS	B,A		argument 1 of memset(): unsigned char *
	LBSR	_memset
	LEAS	6,S
* Line loader.c:79: function call: init()
	LBSR	_init
* Line loader.c:80: function call: seekFile()
	LEAX	-2193,U		variable `r', declared at loader.c:78
* optim: optimizePshsOps
	LDD	6,U		variable `ext', declared at loader.c:60
	PSHS	X,B,A		optim: optimizePshsOps
	LDD	4,U		variable `name', declared at loader.c:60
	PSHS	B,A		argument 1 of seekFile(): const char *
	LBSR	_seekFile
	LEAS	6,S
* Line loader.c:85: function call: read()
	CLRA
	LDB	#$03		decimal 3 signed
	PSHS	B,A		argument 3 of read(): int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:86: if
	CLRA
* optim: stripConsecutiveLoadsToSameReg
* PSHS B,A optim: optimizeStackOperations1
	LDB	-2010,U		index 0 in array myBuf[]
* optim: stripExtraClrA_B
	CMPD	#1		optim: optimizeStackOperations1
	BNE	L00098		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00101 removed
	CLRA
* optim: stripConsecutiveLoadsToSameReg
* PSHS B,A optim: optimizeStackOperations1
	LDB	-2009,U		index 1 in array myBuf[]
* optim: stripExtraClrA_B
	CMPD	#6		optim: optimizeStackOperations1
	BNE	L00098		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00100 removed
	CLRA
* optim: stripConsecutiveLoadsToSameReg
* PSHS B,A optim: optimizeStackOperations1
	LDB	-2008,U		index 2 in array myBuf[]
* optim: stripExtraClrA_B
	CMPD	#7		optim: optimizeStackOperations1
	BEQ	L00099
* optim: branchToNextLocation
L00098	EQU	*		then clause of if() started at loader.c:86
* Line loader.c:86
* Line loader.c:87: function call: printf()
	LDX	#$0D		optim: transformPshsDPshsD
* optim: optimizePshsOps
	CLRA
	LDB	#$0A		decimal 10 signed
	PSHS	X,B,A		optim: optimizePshsOps
	LDB	-2008,U		index 2 in array myBuf[]
* optim: removeClr
	PSHS	B,A		argument 4 of printf(): unsigned char
	LDB	-2009,U		index 1 in array myBuf[]
* optim: stripExtraClrA_B
	PSHS	B,A		argument 3 of printf(): unsigned char
	LDB	-2010,U		index 0 in array myBuf[]
* optim: stripExtraClrA_B
	PSHS	B,A		argument 2 of printf(): unsigned char
	LEAX	S00087,PCR	"Wrong format![%d%d%d]%c%c"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	12,S
* Line loader.c:88: function call: exit()
	CLRA
	LDB	#$01		decimal 1 signed
	PSHS	B,A		argument 1 of exit(): int
	LBSR	_exit
	LEAS	2,S
L00099	EQU	*		else clause of if() started at loader.c:86
* Useless label L00102 removed
* Line loader.c:92: function call: read()
	CLRA
	LDB	#$01		decimal 1 signed
	PSHS	B,A		argument 3 of read(): int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:93: assignment: =
	LDB	-2010,U		index 0 in array myBuf[]
	CLRA
	STD	-2205,U
* Line loader.c:94: function call: read()
	LDB	#$01		optim: removeAndOrMulAddSub
	PSHS	B,A		argument 3 of read(): int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:95: assignment: =
	LDB	-2010,U		index 0 in array myBuf[]
	CLRA
	STD	-2203,U
* Line loader.c:96: function call: read()
	LDB	#$01		optim: removeAndOrMulAddSub
	PSHS	B,A		argument 3 of read(): int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:97: assignment: =
	LDB	-2010,U		index 0 in array myBuf[]
	CLRA
	STD	-2201,U
* Line loader.c:98: function call: printf()
	LDB	#$0D		optim: removeAndOrMulAddSub
	PSHS	B,A		argument 6 of printf(): int
	LDB	#$0A		optim: removeAndOrMulAddSub
	PSHS	B,A		argument 5 of printf(): int
	LDY	-2201,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LDX	-2205,U		optim: transformPshsDPshsD
* optim: optimizePshsOps
	LDD	-2203,U		variable `sizexx', declared at loader.c:62
	PSHS	Y,X,B,A		optim: optimizePshsOps
	LEAX	S00088,PCR	"dimensions:(%d|%d)*%d%c%c"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	12,S
* Line loader.c:101: function call: read()
	CLRA
	LDB	#$20		decimal 32 signed
	PSHS	B,A		argument 3 of read(): int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:102: function call: _PALETTE()
	LEAX	-2010,U		address of array `myBuf`
	TFR	X,D		as r-value
* Emitted no code to cast `unsigned char[]' to `unsigned int *'
	PSHS	B,A		argument 1 of _PALETTE(): unsigned int *
	LBSR	__PALETTE
	LEAS	2,S
* Line loader.c:103: function call: printf()
	LDX	#$0D		optim: transformPshsDPshsD
* optim: optimizePshsOps
	CLRA
	LDB	#$0A		decimal 10 signed
	PSHS	X,B,A		optim: optimizePshsOps
	LEAX	S00089,PCR	"palette loaded%c%c"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	6,S
* Line loader.c:106: function call: read()
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B,A		argument 3 of read(): int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:107: assignment: =
	LDB	-2010,U		index 0 in array myBuf[]
	STB	-2199,U
* Line loader.c:108: assignment: =
	LDB	-2009,U		index 1 in array myBuf[]
	STB	-2198,U
* Line loader.c:109: function call: printf()
	LDX	#$0D		optim: transformPshsDPshsD
* optim: optimizePshsOps
	CLRA
	LDB	#$0A		decimal 10 signed
	PSHS	X,B,A		optim: optimizePshsOps
	LDB	-2199,U		variable `aChunks', declared at loader.c:63
* optim: removeClr
	PSHS	B,A		argument 2 of printf(): unsigned char
	LEAX	S00090,PCR	"chunks A count:%d%c%c"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	8,S
* Line loader.c:110: function call: printf()
	LDX	#$0D		optim: transformPshsDPshsD
* optim: optimizePshsOps
	CLRA
	LDB	#$0A		decimal 10 signed
	PSHS	X,B,A		optim: optimizePshsOps
	LDB	-2198,U		variable `bChunks', declared at loader.c:63
* optim: removeClr
	PSHS	B,A		argument 2 of printf(): unsigned char
	LEAX	S00091,PCR	"chunks B count:%d%c%c"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	8,S
* Line loader.c:113: function call: initParameters()
	CLRA
	LDB	#$04		decimal 4 signed
	PSHS	B,A		argument 4 of initParameters(): int
* optim: stripExtraClrA_B
	LDB	#$0F		decimal 15 signed
	PSHS	B,A		argument 3 of initParameters(): int
	LDB	#$09		optim: removeAndOrMulAddSub
	PSHS	B,A		argument 2 of initParameters(): int
	LDD	#$01FF		decimal 511 signed
	PSHS	B,A		argument 1 of initParameters(): int
	LBSR	_initParameters
	LEAS	8,S
* Line loader.c:116: init of variable chunkSize
	CLRA
	CLRB
	STD	-10,U		variable chunkSize
* Line loader.c:117: init of variable inputIdx
* optim: stripExtraClrA_B
* optim: stripExtraClrA_B
	STD	-8,U		variable inputIdx
* Line loader.c:118: init of variable outputIdx
* optim: stripExtraClrA_B
* optim: stripExtraClrA_B
	STD	-6,U		variable outputIdx
* Line loader.c:119: init of variable sz
* optim: stripExtraClrA_B
* optim: stripExtraClrA_B
	STD	-4,U		variable sz
* Line loader.c:120: init of variable count
	CLR	-2,U		variable count
* Line loader.c:121: init of variable isComp
	CLR	-1,U		variable isComp
* Line loader.c:122: while
	LBRA	L00104		jump to while condition
L00103	EQU	*		while body
* Line loader.c:124: function call: read()
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B,A		argument 3 of read(): int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:125: assignment: =
	LDB	-2010,U		index 0 in array myBuf[]
	CLRA
	STD	-10,U
* Line loader.c:126: assignment: =
* optim: storeLoad
	TFR	B,A		shift D 8 bits left
	CLRB
	STD	-10,U
* Line loader.c:127: assignment: |=
	LDB	-2009,U		index 1 in array myBuf[]
	CLRA
	PSHS	B,A
	LEAX	-10,U
	LDD	,S++
	ORA	,X
	ORB	1,X
	STD	,X
* Line loader.c:129: assignment: +=
	LDD	-8,U		variable inputIdx
	ADDD	#$02		+= operator at loader.c:129
	STD	-8,U
* Line loader.c:131: function call: read()
	CLRA
	LDB	#$01		decimal 1 signed
	PSHS	B,A		argument 3 of read(): int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:132: assignment: =
	LDB	-2010,U		index 0 in array myBuf[]
	STB	-1,U
* Line loader.c:135: function call: read()
	LDD	-10,U		variable `chunkSize', declared at loader.c:116
	PSHS	B,A		argument 3 of read(): unsigned int
	LEAY	-2010,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-2193,U		variable `r', declared at loader.c:78
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_read
	LEAS	6,S
* Line loader.c:137: if
	LDB	-1,U		variable `isComp', declared at loader.c:121
* optim: loadCmpZeroBeqOrBne
	BEQ	L00107		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00106 removed
* Line loader.c:137
* Line loader.c:138: assignment: =
* Line loader.c:138: function call: uncompress()
	LDX	#$1F40		optim: transformPshsDPshsD
	PSHS	X		optim: transformPshsDPshsD
* optim: optimizeStackOperations4
* optim: optimizeStackOperations4
	LDD	-2195,U		variable `screenStartChar', declared at loader.c:67
	ADDD	-6,U		optim: optimizeStackOperations4
	PSHS	B,A		argument 3 of uncompress(): unsigned char *
	LDD	-10,U		variable chunkSize
	ADDD	#$FFFF		65535
	PSHS	B,A		argument 2 of uncompress(): unsigned int
	LEAX	-2010,U		address of array myBuf
	PSHS	X		argument 1 of uncompress(): unsigned char[]
	LBSR	_uncompress
	LEAS	8,S
	STD	-4,U
	BRA	L00108		jump over else clause
L00107	EQU	*		else clause of if() started at loader.c:137
* Line loader.c:139
* Line loader.c:140: function call: memcpy()
	LDD	-10,U		variable `chunkSize', declared at loader.c:116
	PSHS	B,A		argument 3 of memcpy(): unsigned int
	LEAX	-2010,U		address of array myBuf
* optim: optimizePshsOps
	LDD	-6,U		variable `outputIdx', declared at loader.c:118
	PSHS	X,B,A		optim: optimizePshsOps
	LDD	-2195,U		variable `screenStartChar', declared at loader.c:67
	ADDD	,S++
	PSHS	B,A		argument 1 of memcpy(): unsigned char *
	LBSR	_memcpy
	LEAS	6,S
L00108	EQU	*		end of if() started at loader.c:137
* Line loader.c:143: assignment: +=
	LDD	-8,U		variable inputIdx
	ADDD	-10,U		variable chunkSize
	STD	-8,U		variable inputIdx
* Line loader.c:144: assignment: +=
	LDD	-6,U		variable outputIdx
	ADDD	-4,U		variable sz
	STD	-6,U		variable outputIdx
* Line loader.c:145: post-increment
	INC	-2,U
* Line loader.c:146: if
	LDB	-2,U		variable count
	CMPB	-2199,U		variable aChunks
	BNE	L00110		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00109 removed
* Line loader.c:146
* Line loader.c:147: assignment: =
	CLRA
	CLRB
	STD	-6,U
* Line loader.c:148: function call: _SWITCH_B()
	LBSR	__SWITCH_B
L00110	EQU	*		else clause of if() started at loader.c:146
* Useless label L00111 removed
L00104	EQU	*		while condition at loader.c:122
	LDB	-2199,U		variable aChunks
	ADDB	-2198,U		variable bChunks
	PSHS	B
	LDB	-2,U		variable `count', declared at loader.c:120
	CMPB	,S+		compare with LSB
	LBLO	L00103
* optim: branchToNextLocation
* Useless label L00105 removed
* Useless label L00085 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION loadAndDisplay(): defined at loader.c:60
funcend_loadAndDisplay	EQU *
funcsize_loadAndDisplay	EQU	funcend_loadAndDisplay-_loadAndDisplay
_main	EXPORT


*******************************************************************************

* FUNCTION main(): defined at loader.c:153
_main	EQU	*
* Calling convention: Default
* Line loader.c:155: function call: loadAndDisplay()
	LEAY	S00093,PCR	optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	S00092,PCR	"moby-d00"
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_loadAndDisplay
	LEAS	4,S
* Line loader.c:156: function call: _WAITSPC()
	LBSR	__WAITSPC
* Line loader.c:157: function call: loadAndDisplay()
	LEAY	S00093,PCR	optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	S00094,PCR	"beast000"
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_loadAndDisplay
	LEAS	4,S
* Line loader.c:158: function call: _WAITSPC()
	LBSR	__WAITSPC
* Line loader.c:159: function call: loadAndDisplay()
	LEAY	S00093,PCR	optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	S00095,PCR	"fouAPi00"
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_loadAndDisplay
	LEAS	4,S
* Line loader.c:160: function call: _WAITSPC()
	LBSR	__WAITSPC
* Line loader.c:161: function call: loadAndDisplay()
	LEAY	S00093,PCR	optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	S00096,PCR	"arton400"
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_loadAndDisplay
	LEAS	4,S
* Line loader.c:162: function call: _WAITSPC()
	LBSR	__WAITSPC
* Line loader.c:163: function call: loadAndDisplay()
	LEAY	S00093,PCR	optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	S00097,PCR	"arton500"
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_loadAndDisplay
	LEAS	4,S
* Line loader.c:164: function call: _WAITSPC()
	LBSR	__WAITSPC
* Line loader.c:166: return with value
	CLRA
	CLRB
* optim: branchToNextLocation
* Useless label L00086 removed
	RTS
* END FUNCTION main(): defined at loader.c:153
funcend_main	EQU *
funcsize_main	EQU	funcend_main-_main


	ENDSECTION




	SECTION	initgl_start


INITGL	EXPORT
INITGL	EQU	*


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*


*******************************************************************************

* STRING LITERALS
S00087	EQU	*
	FCC	"Wrong format![%d%d%d]%c%c"
	FCB	0
S00088	EQU	*
	FCC	"dimensions:(%d|%d)*%d%c%c"
	FCB	0
S00089	EQU	*
	FCC	"palette loaded%c%c"
	FCB	0
S00090	EQU	*
	FCC	"chunks A count:%d%c%c"
	FCB	0
S00091	EQU	*
	FCC	"chunks B count:%d%c%c"
	FCB	0
S00092	EQU	*
	FCC	"moby-d00"
	FCB	0
S00093	EQU	*
	FCC	"167"
	FCB	0
S00094	EQU	*
	FCC	"beast000"
	FCB	0
S00095	EQU	*
	FCC	"fouAPi00"
	FCB	0
S00096	EQU	*
	FCC	"arton400"
	FCB	0
S00097	EQU	*
	FCC	"arton500"
	FCB	0
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




	SECTION	initgl_end


	RTS			end of global variable initialization


	ENDSECTION




*******************************************************************************



	SECTION	program_end


program_end	EXPORT
program_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 9 utility routine(s).
_exit	IMPORT
_init	IMPORT
_initParameters	IMPORT
_memcpy	IMPORT
_memset	IMPORT
_printf	IMPORT
_read	IMPORT
_seekFile	IMPORT
_uncompress	IMPORT


*******************************************************************************

	END
